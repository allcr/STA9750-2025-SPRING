---
title: "Memorandum to Mr. Keno Slum, Chair of the Commission to Analyze Taxpayer Spending (Mini Project 1)"
format: 
  html: 
    code-fold: true
execute:
  echo: false
  output: false
draft: True
---

The New York City Council passed the Adopted Budget for Fiscal Year 2025 (FY25) on July 30th, 2025. The Comission to Analyze Taxpayer Spending (henceforth, CATS) was formed as to ensure that the budget of \$112.4 billion dollars was used in the most economically efficient way and reduce waste within New York City agencies.

The first [public outreach meeting](https://www.youtube.com/watch?v=areUGfOHkMA) of CATS was held on August 4th, 2024. 


1. Isolate and correct for salary outliers
  - see what some of the errors are 
      - total gross pay as per the nyc data dictionary can be negative.Filter out all fields with negative total gross pay. 
2. clean other errors
  - winsorization
3. perform the required asks on the website
4. ask what if we got rid of bonuses and increased everyone's salary by the median bonus value for their job title
5. dtpylr look into it 


```{r}
if(!file.exists("data/mp01/nyc_payroll_export.csv")){
    dir.create("data/mp01", showWarnings=FALSE, recursive=TRUE)
    
    ENDPOINT <- "https://data.cityofnewyork.us/resource/k397-673e.json"
    
    if(!require("httr2")) install.packages("httr2")
    library(httr2)
    
    if(!require("jsonlite")) install.packages("jsonlite")
    library(jsonlite)
    
    if(!require("dplyr")) install.packages("dplyr")
    library(dplyr)
    
    if(!require("readr")) install.packages("readr")
    library(readr)
    
    if(!require("ggplot2")) install.packages("ggplot2")
    library(readr)
    
    if(!require("scales")) install.packages("scales")
    library(scales)
    
    
    BATCH_SIZE <- 50000
    OFFSET     <- 0
    END_OF_EXPORT <- FALSE
    ALL_DATA <- list()
    
    while(!END_OF_EXPORT){
        cat("Requesting items", OFFSET, "to", BATCH_SIZE + OFFSET, "\n")
        
        req <- request(ENDPOINT) |>
                  req_url_query(`$limit`  = BATCH_SIZE, 
                                `$offset` = OFFSET)
        
        resp <- req_perform(req)
        
        batch_data <- fromJSON(resp_body_string(resp))
        
        ALL_DATA <- c(ALL_DATA, list(batch_data))
        
        if(NROW(batch_data) != BATCH_SIZE){
            END_OF_EXPORT <- TRUE
            
            cat("End of Data Export Reached\n")
        } else {
            OFFSET <- OFFSET + BATCH_SIZE
        }
    }
    
    ALL_DATA <- bind_rows(ALL_DATA)
    
    cat("Data export complete:", NROW(ALL_DATA), "rows and", NCOL(ALL_DATA), "columns.")
    
    write_csv(ALL_DATA, "data/mp01/nyc_payroll_export.csv")
} else if (file.exists("data/mp01/nyc_payroll_export.csv")) {
      
    if(!require("dplyr")) install.packages("dplyr")
    library(dplyr)
    
    if(!require("readr")) install.packages("readr")
    library(readr)
    
    if(!require("ggplot2")) install.packages("ggplot2")
    library(ggplot2)
      
    if(!require("scales")) install.packages("scales")
    library(scales)
    

  # TODO Add sane file checks other than existsence
  ALL_DATA <- read_csv("data/mp01/nyc_payroll_export.csv")

}


```

It is of interest to the committee to know exactly how many employees each department has. We will ignore Total Other Pay because [while it is important, it is mysterious.](https://i.kym-cdn.com/entries/icons/original/000/053/034/thworkcover.jpg)

```{r}


# We will clean the data appropriately
ALL_DATA <- ALL_DATA %>%
  mutate(agency_name = replace(agency_name, agency_name == "Police Department", "POLICE DEPARTMENT")) %>%
  mutate(agency_name = replace(agency_name, agency_name == "BRONX DISTRICT ATTORNEY", "Bronx DA")) %>%
  mutate(agency_name = replace(agency_name, agency_name == "BOARD OF CORRECTIONS", "BOARD OF CORRECTION")) %>%
  rename("Agency Name" = agency_name,
         "Last Name" = last_name, 
         "First Name" = first_name,
         "Work Location (Borough)" = work_location_borough,
         "Title / Job Description" = title_description, 
         "Leave Status" = leave_status_as_of_june_30)

```




## Calculate Annualized Base Salary and Gross Annual Pay
```{r}

cleaned <- ALL_DATA |> mutate(base_annual_pay = case_when(pay_basis=='per Hour' ~ base_salary * (regular_hours + 1.5 * ot_hours),
                                                 pay_basis=='per Annum' ~  base_salary,
                                                 pay_basis=='Per Day' ~ base_salary * regular_hours / 7.5,
                                                 pay_basis=='Prorated Annual' ~ base_salary),
                              gross_annual_pay = regular_gross_paid + total_ot_paid + total_other_pay) |> filter(gross_annual_pay > 0)
                                                 
                                            
                                                
```


```{r}

# annual_pay_vector <- ALL_DATA |> select(total_annual_pay)|> filter(!is.na(total_annual_pay)) 
# ggplot(annual_pay_vector, aes(x=total_annual_pay)) + geom_histogram(bins=5) 
# save it to a 
```


##  Figure out what the mayor is up to 
```{r}
                    
eric_adams_data <- cleaned |> filter(`Last Name`=="ADAMS",`First Name`=="ERIC", mid_init=='L')


```

```{r}


ead <- eric_adams_data |> group_by(fiscal_year) |> summarize(sum_salary = sum(gross_annual_pay))

ggplot(ead, mapping=aes(x=fiscal_year, y=sum_salary)) + geom_bar(stat='identity') + scale_y_continuous(name="Annual Salary of Eric Adams", labels=label_currency(scale_cut= cut_short_scale()),
                                                                breaks = scales::pretty_breaks(n = 6)) + scale_x_continuous(name="Fiscal Year", breaks = scales::pretty_breaks(n=10))
```


### Which Job Title has the highest base rate of pay? 
 We have determined that the for the most recent financial year, the Chancellor 
 

 
 
The highest base rate annualized salary was for the Chair of the NYC Housing Authoritity. Their pay was the highest base pay recorded for three years in a row at $414,707. 
 
```{r}
cleaned |> group_by(fiscal_year,`Agency Name`, `Title / Job Description`) |> summarize(avg_base=mean(base_annual_pay))  |> ungroup() |> slice_max(order_by=avg_base,n=1) |>  arrange(fiscal_year) 
```
## What individual and in what year, had the highest total pay  
```{r}

cleaned |> group_by(fiscal_year) |>  slice_max(gross_annual_pay, n=1) |> select(fiscal_year, `Agency Name`, `Title / Job Description`, `Last Name`, `First Name`, mid_init, gross_annual_pay) |> arrange(desc(gross_annual_pay))

```
Mark K. Tettonis, the Chief Marine Engineer of the Department of Transportation had the highest total pay in 2024. what is surprising is how his pay is almost three times as much as the pay for the next highest record. 

## Which Individual had worked the most overtime hours 
#### Per Year
```{r}

cleaned |> group_by(fiscal_year, `Last Name`, `First Name`, mid_init) |> summarize(total_ot_hours = sum(ot_hours)) |> filter(!is.na(`Last Name`))|> ungroup(`Last Name`, `First Name`, mid_init) |>slice_max(total_ot_hours, n=1) |> mutate(total_ot_days=total_ot_hours/24)

```
This does not make sense as there is at least one year with more hours for OT than hours in one year. These are common names. MD is almost certainly short for muhammad. Are multiple people being collapsed into one "person" , am I messing with the data? the initial group by/sum on hours is supposed to be used in the case where there is a person changing jobs in one year 

#### Total

```{r}

cleaned |> group_by(`Last Name`, `First Name`, mid_init) |> summarize(total_ot_hours = sum(ot_hours)) |>filter(!is.na(`Last Name`))|> ungroup() |> slice_max(total_ot_hours, n=1) |> mutate(total_ot_days=total_ot_hours/24)

```

```{r}
#| output: true
time_vec <- c("Last Updated:", format(Sys.time(), "%Y-%m-%d at %H:%M%p"))
cat(paste(time_vec," "))
```

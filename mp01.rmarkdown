 ---
title: "A Review of the New York City Payroll with Reccomendations for Improvement from the Commission to Analyze Taxpayer Spending (Mini Project 1)"
format: 
  html: 
    code-fold: true
engine: knitr
execute:
  echo: true
  output: false
draft: False

---

# Foreward
In February 2025, the Commission to Analyze Taxpayer Spending was asked to analyze several questions of interest to the Mayor of New York City and the New York City Council regarding the budget for the City. In this document, we will present our findings to each of these questions. 

# Executive Summary
The Commission has determined that capping the salary for the Mayor will not lead to significant savings on the City payroll. The Commission has found sufficient evidence that increasing the number of employees per agency to reduce total overtime expenditure or replacing overtime altogether with a one time pay raise would have an impact on the city budget. 

# Research






```{r}
if (!file.exists("data/mp01/nyc_payroll_export.csv")) {
  dir.create("data/mp01", showWarnings = FALSE, recursive = TRUE)

  ENDPOINT <- "https://data.cityofnewyork.us/resource/k397-673e.json"

  if (!require("httr2")) install.packages("httr2")
  library(httr2)

  if (!require("jsonlite")) install.packages("jsonlite")
  library(jsonlite)

  if (!require("dplyr")) install.packages("dplyr")
  library(dplyr)

  if (!require("readr")) install.packages("readr")
  library(readr)

  if (!require("ggplot2")) install.packages("ggplot2")
  library(readr)

  if (!require("scales")) install.packages("scales")
  library(scales)

  if (!require("stringr")) install.packages("scales")
  library(stringr)

  if (!require("knitr")) install.packages("knitr")
  library(knitr)

  if (!require("kableExtra")) install.packages("kableExtra")
  library(kableExtra)


  BATCH_SIZE <- 50000
  OFFSET <- 0
  END_OF_EXPORT <- FALSE
  ALL_DATA <- list()

  while (!END_OF_EXPORT) {
    cat("Requesting items", OFFSET, "to", BATCH_SIZE + OFFSET, "\n")

    req <- request(ENDPOINT) |>
      req_url_query(
        `$limit` = BATCH_SIZE,
        `$offset` = OFFSET
      )

    resp <- req_perform(req)

    batch_data <- fromJSON(resp_body_string(resp))

    ALL_DATA <- c(ALL_DATA, list(batch_data))

    if (NROW(batch_data) != BATCH_SIZE) {
      END_OF_EXPORT <- TRUE

      cat("End of Data Export Reached\n")
    } else {
      OFFSET <- OFFSET + BATCH_SIZE
    }
  }

  ALL_DATA <- bind_rows(ALL_DATA)

  cat("Data export complete:", NROW(ALL_DATA), "rows and", NCOL(ALL_DATA), "columns.")

  write_csv(ALL_DATA, "data/mp01/nyc_payroll_export.csv")
} else if (file.exists("data/mp01/nyc_payroll_export.csv")) {
  if (!require("dplyr")) install.packages("dplyr")
  library(dplyr)

  if (!require("readr")) install.packages("readr")
  library(readr)

  if (!require("ggplot2")) install.packages("ggplot2")
  library(ggplot2)

  if (!require("scales")) install.packages("scales")
  library(scales)

  if (!require("stringr")) install.packages("scales")
  library(stringr)

  if (!require("knitr")) install.packages("knitr")
  library(knitr)

  if (!require("kableExtra")) install.packages("kableExtra")
  library(kableExtra)

  ALL_DATA <- read_csv("data/mp01/nyc_payroll_export.csv", col_types = "iiccccTcccncnnn")
}




cleaned <- ALL_DATA |>
  mutate(work_location_borough = replace(work_location_borough, work_location_borough == "Bronx", "BRONX")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Office Of Collective Bargainin", "Office Of Collective Bargaining")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Police Department", "POLICE DEPARTMENT")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Bronx DA", "BRONX DISTRICT ATTORNEY")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Manhattan DA", "DISTRICT ATTORNEY-MANHATTAN")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Queens DA", "DISTRICT ATTORNEY QNS COUNTY")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Kings DA", "DISTRICT ATTORNEY KINGS COUNTY")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Richmond DA", "DISTRICT ATTORNEY RICHMOND COU")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Spec Narcs-DA", "DISTRICT ATTORNEY-SPECIAL NARC")) |>
  mutate(agency_name = replace(agency_name, agency_name == "BOARD OF CORRECTIONS", "BOARD OF CORRECTION")) |>
  mutate(agency_name = replace(agency_name, agency_name == "PRESIDENT BOROUGH OF MANHATTAN", "BOROUGH PRESIDENT-MANHATTAN")) |>
  mutate(agency_name = replace(agency_name, agency_name == "Police Department", "POLICE DEPARTMENT")) |>
  mutate(aggregated_agency_name = agency_name) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "DEPT OF ED"), "DEPARTMENT OF EDUCATION")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "PUBLIC ADMINISTRATOR"), "PUBLIC ADMINISTRATOR")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "STATEN ISLAND COMMUNITY BD"), "STATEN ISLAND COMMUNITY BD")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "QUEENS COMMUNITY BOARD"), "QUEENS COMMUNITY BOARD")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "MANHATTAN COMMUNITY BOARD"), "MANHATTAN COMMUNITY BOARD")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "BROOKLYN COMMUNITY BOARD"), "BROOKLYN COMMUNITY BOARD")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "BRONX COMMUNITY BOARD"), "BRONX COMMUNITY BOARD")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, str_detect(agency_name, "BOROUGH PRESIDENT"), "BOROUGH PRESIDENT")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, agency_name == "BOARD OF ELECTION POLL WORKERS", "BOARD OF ELECTION")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, agency_name == "DEPARTMENT OF EDUCATION ADMIN", "DEPARTMENT OF EDUCATION")) |>
  mutate(aggregated_agency_name = replace(aggregated_agency_name, agency_name == "DOE CUSTODIAL PAYROL", "DEPARTMENT OF EDUCATION")) |>
  mutate(pay_basis = if_else(title_description == "Custodian Engineer" & pay_basis == "per Hour", "per Annum", pay_basis)) |>
  mutate(
    agency_name = str_to_title(agency_name),
    aggregated_agency_name = str_to_title(aggregated_agency_name),
    last_name = str_to_title(last_name),
    mid_init = str_to_title(mid_init),
    title_description = str_to_title(title_description),
    first_name = str_to_title(first_name),
    work_location_borough = str_to_title(work_location_borough),
    leave_status_as_of_june_30 = str_to_title(leave_status_as_of_june_30)
  ) |>
  mutate(
    base_annual_pay = case_when(
      pay_basis == "per Hour" ~ base_salary * (regular_hours + 1.5 * ot_hours),
      pay_basis == "per Annum" ~ base_salary,
      pay_basis == "Per Day" ~ base_salary * regular_hours / 7.5,
      pay_basis == "Prorated Annual" ~ base_salary
    ),
    gross_annual_pay = regular_gross_paid + total_ot_paid + total_other_pay
  ) |>
  filter(gross_annual_pay > 0) |>
  filter(!is.na(last_name))



#rm(ALL_DATA)
```






The commission  will use the NYC Payroll data with the specified data dictionary found [here](https://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e). The Commission has annualized the base pay rate reported in the city data. This analysis, at times, will also rely on the gross annual pay as recommended in the notes attached to the data dictionary. 

The Commission has cleaned the data to the best of its ability. The Commission also defined an aggregated agency name. This is used for analysis where we need to analyze an agency as a whole and not any reported sub divisions of an agency. The Department of Education notably has many sub divisions. 

The Commission has also corrected data for Custodial Engineers within the city. There is a pattern of classifying these employees as hourly workers which does not align with the salaries they are recorded to have received. As such, they have been classified as "Per Annum" employees with regard to pay. 

The Commission  has removed records from the analysis where the gross annual pay is less than zero or there is no last name recorded in the data set. The Commission believes that these records require further information to properly address. However, this information is not currently available. 


## Which job title has the highest base rate of pay?
The commission has been asked which role within New York City has the highest base rate of pay. We will be using the annualized base rate of pay and not the gross annual pay for this analysis. 







```{r}
#| output: true
tmp <- cleaned |>
  group_by(title_description) |>
  summarize(avg_base = mean(base_annual_pay)) |>
  slice_max(order_by = avg_base, n = 1)

kable(tmp |>
  rename(
    "Title / Job Description" = title_description,
    "Average Base Annual Pay (USD)" = avg_base
  ), digits = 0, format.args = list(big.mark = ","))
```






The job title with the highest average annual base pay is `r .QuartoInlineRender(tmp$title_description)` at `r .QuartoInlineRender(dollar(tmp$avg_base))` per year.


## What individual and in what year had the highest total pay? 

The commission has decided to review this using the total gross pay as calculated by the methodology within the data dictionary provided by the city and not the annualized base rate of pay. 

To do so, we 
 






```{r}
#| output: true
tmp <- cleaned |>
  select(fiscal_year, agency_name, title_description, last_name, first_name, mid_init, gross_annual_pay) |>
  ungroup() |>
  slice_max(gross_annual_pay, n = 1)
```






`r .QuartoInlineRender(paste(tmp$first_name, if(!is.na(tmp$mid_init)){paste(tmp$mid_init,".", sep="")}else{} ,tmp$last_name,sep=" "))`, the `r .QuartoInlineRender(tmp$title_description)` of the `r .QuartoInlineRender(tmp$agency_name)` had the highest total pay of `r .QuartoInlineRender(dollar(tmp$gross_annual_pay))` in `r .QuartoInlineRender(tmp$fiscal_year)`. 

## Which individual had worked the most overtime hours?

### Highest Logged Amount of Overtime Hours Annually

The Commission has found that the below employees have logged the largest amount of overtime hours per year. The Police Department notably is featured several times on this list. 

In this instance, our analysis is hurt but the lack of unique employee identifiers. It is not immediately apparent why. 






```{r}
#| output: true
cleaned |>
  group_by(fiscal_year, agency_name, last_name, first_name, mid_init, title_description) |>
  summarize(total_ot_hours = sum(ot_hours)) |>
  ungroup(agency_name, last_name, first_name, mid_init, title_description) |>
  slice_max(total_ot_hours, n = 1) |>
  mutate(total_ot_days = total_ot_hours / 24) |>
  arrange(desc(fiscal_year)) |>
  rename(
    "Fiscal Year" = fiscal_year,
    "Total Overtime Hours" = total_ot_hours,
    "Total Overtime in Days" = total_ot_days,
    "Title / Job Description" = title_description,
    "Agency Name" = agency_name,
    "First Name" = first_name,
    "Last Name" = last_name,
    "Middle Initial" = mid_init
  ) |>
  kable()
```








### Employee with Highest Total Amount of Logged Overtime Hours 






```{r}
#| output: true
tmp <- cleaned |>
  group_by(agency_name, last_name, first_name, mid_init, title_description) |>
  summarize(total_ot_hours = sum(ot_hours)) |>
  ungroup() |>
  slice_max(total_ot_hours, n = 1) |>
  mutate(total_ot_days = total_ot_hours / 24) |>
  rename(
    "Title / Job Description" = title_description,
    "Agency Name" = agency_name,
    "First Name" = first_name,
    "Last Name" = last_name,
    "Middle Initial" = mid_init,
    "Total Overtime Hours" = total_ot_hours,
    "Total Overtime in Days" = total_ot_days
  ) |>
  kable(digits = 2, format.args = list(big.mark = ","))
```






John Castillo, a Correctional Officer in the Department of Corrections, has logged the largest amount of overtime hours within NYC. Mr. Castillo has logged 22,120 hours or 922 days of overtime according to publicly available data. 

## Which agency has the highest average total annual gross payroll?






```{r}
#| output: true
cleaned |>
  group_by(aggregated_agency_name) |>
  summarize(mean_annual_gross_salary = mean(gross_annual_pay)) |>
  slice_max(mean_annual_gross_salary, n = 10) |>
  rename(
    "Agency Name (Aggregated)" = aggregated_agency_name,
    "Mean Annual Gross Salary (USD)" = mean_annual_gross_salary
  ) |>
  kable(digits = 2, format.args = list(big.mark = ","))
```






The Office of Collective Bargaining[^1] has the highest average gross salary of any agency within New York City. This conclusion is sound as its stated mission[^3] is to help the City negotiate collective bargaining with unions and the department will need a high number of attorneys on payroll to do so. 

## Which agency has the most employees on payroll each year?






```{r}
#| output: true
tmp <- cleaned |>
  group_by(fiscal_year, aggregated_agency_name) |>
  summarize(count_employee = n()) |>
  ungroup() |>
  slice_max(count_employee, n = 10) |>
  arrange(desc(fiscal_year)) |>
  rename(
    "Number of Employees on File" = count_employee,
    "Agency Name (Aggregated)" = aggregated_agency_name,
    "Fiscal Year" = fiscal_year
  )
tmp$`Number of Employees on File` <- format(tmp$`Number of Employees on File`, big.mark = ",")

kable(tmp)
```






The Department of Education has the most employees of any department[^1] within New York City for all years with publicly available data. 

## Which agency has the highest average overtime usage?





```{r}
#| output: true
cleaned |>
  group_by(agency_name) |>
  summarize(avg_ot_count = mean(ot_hours), avg_reg_hours = mean(regular_hours)) |>
  filter(avg_ot_count != 0) |>
  arrange(desc(avg_ot_count)) |>
  slice_max(avg_ot_count, n = 10) |>
  rename(
    "Agency Name" = agency_name,
    "Average Amount of Overtime Hours" = avg_ot_count,
    "Average Amount of Regular Hours" = avg_reg_hours
  ) |>
  kable(digits = 0, format.args = list(big.mark = ","))
```






The New York Fire Department has the highest average overtime hours of any department at 347 hours. 
This was determined by taking the average amount of overtime hours logged by agency.  The top ten agencies by average amount of overtime worked is provided above. 

## What is the average salary of employees outside of the five bouroughs?

The average salary of employees outside of the five boroughs is listed below. The commission is limited as the there is a catch all category called "Other". Further granularity is needed for future analysis. We leave out any employee where the work location  was recorded as `r .QuartoInlineRender(NA)`. 






```{r}
#| output: true
cleaned |>
  filter(work_location_borough %in% c("Albany", "Other", "Orange")) |>
  group_by(work_location_borough) |>
  summarize(avg_gross_annual_pay = mean(gross_annual_pay)) |>
  rename(
    "Work Location (Borough)" = work_location_borough,
    "Average Gross Annual Pay" = avg_gross_annual_pay
  ) |>
  kable(digits = 0, format.args = list(big.mark = ","))
```






## How much has the city's aggregate payroll grown in the past 10 years? 






```{r}
#| output: true
#| label: nyc_total_payroll
#| fig-cap: "NYC Total Payroll per Year"
#| warning: false
pay_data <- cleaned |>
  group_by(fiscal_year) |>
  summarize(total_payroll = sum(gross_annual_pay))

ggplot(data = pay_data, aes(x = fiscal_year, y = total_payroll)) +
  geom_bar(stat = "identity",fill='steelblue') +
  scale_y_continuous(
    name = "Payroll of New York City",
    labels = label_currency(scale_cut = cut_short_scale()),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_continuous(
    name = "Fiscal Year",
    breaks = scales::pretty_breaks(n = 10)
  ) +
  coord_cartesian(ylim = c(20000000000, NA))

```

```{r}
pay_2014 <- pay_data |> filter(fiscal_year == 2014)|> select(total_payroll)
pay_2024 <- pay_data |> filter(fiscal_year == 2024)|> select(total_payroll)

pay_diff <- pay_2024 - pay_2014
```






Over the last ten years, the total base annual payroll of New York City has increased by `r .QuartoInlineRender(dollar(pay_diff$total_payroll))`, from `r .QuartoInlineRender(dollar(pay_2014$total_payroll))`in 2014 to `r .QuartoInlineRender(dollar(pay_2024$total_payroll))` in 2024. 

# Proposals to reduce expenditure 
Before proceeding we must establish our base value. We will use the total recorded payroll for 2023 as this is the last full year recorded in the data set. 






```{r}
high_water_mark <- cleaned |> 
  filter(fiscal_year == 2023) |> 
  select(gross_annual_pay) |>
  sum()
```







Our benchmark for all years will be  `r .QuartoInlineRender(dollar(high_water_mark))` from 2023. When useful or informative, we will look at data from other years.  

## Proposal 1: Introduce cap based on the Mayor's salary

We will review the proposal to make cap all salaries within the city at the pay rate of the mayor.  It will be helpful to first see the annual gross salary paid to the currency mayor Eric L. Adams as he is present in the data for multiple years and has held multiple jobs within the city.  







```{r}
eric_adams_data <- cleaned |>
  filter(last_name == "Adams", first_name == "Eric", mid_init == "L")
```

```{r}
#| output: true
#| label: eric_adams_pay
#| fig-cap: "Eric L. Adams Payroll per Year"
#| warning: false

ead <- eric_adams_data |>
  group_by(fiscal_year) |>
  summarize(sum_salary = sum(gross_annual_pay))

ggplot(ead, mapping = aes(x = fiscal_year, y = sum_salary)) +
  geom_bar(stat = "identity", fill="steelblue") +
  scale_y_continuous(
    name = "Annual Salary of Eric Adams",
    labels = label_currency(scale_cut = cut_short_scale()),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_continuous(
    name = "Fiscal Year",
    breaks = scales::pretty_breaks(n = 10)
  )
```






Eric Adams was elected as mayor in the 2021 election. It is important to note that his pay for 2022 records his (now) current pay as well as the pay for his previous role as the Brooklyn Borough President. We do see a marked increase in his annual gross pay from 2015 to 2024.


As defined in the New York City Charter[^5], the mayor is entitled to a salary of $258,750 per year. We will use this value as the maximum gross annual pay for all employees. 







```{r}

mayor_cap_2023 <-cleaned |> 
  filter(fiscal_year==2023) |>
  mutate(gross_annual_pay = case_when(gross_annual_pay>258750 ~ 258750,
                                    TRUE ~ gross_annual_pay)) |>
  select(gross_annual_pay) |>
  sum()

```






By capping the total gross annual pay to match that of the mayor, the expected payroll would have been `r .QuartoInlineRender(dollar(mayor_cap_2023))`, representing a savings of `r .QuartoInlineRender(dollar(high_water_mark-mayor_cap_2023))`. 

This value is not as high as we the Commission had hoped. Let us see what the  distribution of gross annual pay for the year 2023 looks like. 







```{r}
#| output: true
#| label: 2023_histogram
#| fig-cap: "HIstogram of Payroll for Fiscal Year 2023"
#| warning: false
cleaned |> 
  filter(fiscal_year==2023)|>
  select(pay_basis,gross_annual_pay) |>
  ggplot(aes(x=gross_annual_pay)) + geom_histogram() +
    scale_y_continuous(
    name = "Count of Employees at Salary Level",
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_continuous(
    name = "Gross Annual Pay",
    labels = label_currency(scale_cut = cut_short_scale()),
    breaks = scales::pretty_breaks(n = 10)
  ) +
geom_vline(aes(xintercept=258750),
            color="blue", linetype="dashed", size=1)

```





Here is the distribution of all employee pay for 2023, with the mayoral salary indicated with the blue line. We can see that there are significantly few people making more than the mayoral salary compared to those making less than the mayoral salary. This includes *ALL* employee types. Let us limit our analysis to only the annually salaried city employees.  







```{r}
#| output: true
#| label: 2023_histogram_annual_salaried
#| fig-cap: "Histogram of Payroll for annually Salaried for Fiscal Year 2023"
#| warning: false

cleaned |> 
  filter(fiscal_year==2023,
         pay_basis %in% c("Per Annum","Prorated Annual"))|>
  select(pay_basis,gross_annual_pay) |>
  ggplot(aes(x=gross_annual_pay)) + geom_histogram() +
    scale_y_continuous(
    name = "Count of Employees at Annual Salary Level",
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_continuous(
    name = "Gross Annual Pay",
    labels = label_currency(scale_cut = cut_short_scale()),
    breaks = scales::pretty_breaks(n = 10)
  ) +
geom_vline(aes(xintercept=258750),
            color="blue", linetype="dashed", size=1)
```





When restricting our view to annually salaried employees, we can see the limits of the proposal. There are significantly more people making less than the Mayor's salary compared to the number of people making more than the mayor. 

## Proposal 2: Increase regular capacity by hiring more employees to reduce overtime expenditure
We will use a 2000 hour work week as the base line measurement.






```{r}
#| output: true
tmp <- cleaned |>
  filter(fiscal_year==2023) |>
  group_by(agency_name, title_description) |>
  summarize(
    average_base_annual_pay = mean(base_annual_pay, ),
    total_base_annual_pay = sum(base_annual_pay),
    total_over_time_paid = sum(total_ot_paid),
    total_ot_hours = sum(ot_hours)
  ) |>
  mutate(
    number_new_full_time_employees = total_ot_hours %/% 2000,
    ot_paid_converted_to_regular = total_over_time_paid / 1.5,
    new_employee_cost = average_base_annual_pay * number_new_full_time_employees,
    is_new_employee_outright_cheaper = case_when(
      number_new_full_time_employees == 0 ~ 0,
      ot_paid_converted_to_regular > new_employee_cost ~ 1,
      TRUE ~ 0
    ),
    savings = case_when(
      is_new_employee_outright_cheaper == 1 ~ ot_paid_converted_to_regular - new_employee_cost,
      TRUE ~ 0
    )
  )

total_savings_by_agency <- tmp |>
  group_by(agency_name) |>
  summarise(total_savings = sum(savings)) |>
  filter(total_savings > 0)

total_savings_by_agency |>
  slice_max(total_savings, n = 10) |>
  rename("Agency Name"=agency_name,
         "Total Savings"=total_savings) |> 
  kable(format.args = list(big.mark = ",")) 



total_savings <- sum(total_savings_by_agency$total_savings)
```






The Commission is pleased to report that `r .QuartoInlineRender(dollar(total_savings))` can be saved by hiring new employees to reduce overtime expenditure. The top ten departments that benefit from this action are in the above table. 


## Proposal 3: Remove overtime pay and increase salaries by the median or average overtime paid
Overtime expenditure is a significant portion of the overall payroll for New York City. We will review the financial impact of eliminating overtime all together and replacing it with a one time pay raise. This one time raise will be equal to the _lower_ value of the median overtime or the average overtime paid per agency and description. 

The annualized base pay and the total overtime paid will be used as the base rate instead of the gross rate. This will simplify our analysis, but we lose a degree of accuracy by not including the total other pay for each employee.  

We will attempt to back-date this analysis by calculating the mean and median overtime paid per agency, job title, and fiscal year. We will then add the _lower_ of the median and the mean to the annualized base pay to create the proposed pay rate. The amount of savings is calculated subtracting the proposed pay rate from the sum of the annualized base pay and the total over paid. 

We will then compare the results against the annual payroll per year to see the total savings had this methodology been adopted in the past. 

   






```{r}
#| output: true

# TODO Get rid of all the TMPs

tmp <- cleaned |>
  group_by(fiscal_year, agency_name, title_description) |>
  summarize(
    average_base_annual_pay = mean(base_annual_pay, ),
    total_base_annual_pay = sum(base_annual_pay),
    total_over_time_paid = sum(total_ot_paid),
    average_over_time_paid = mean(total_ot_paid),
    median_over_time_paid = median(total_ot_paid),
    total_ot_hours = sum(ot_hours),
    number_employees = n(),
    smaller_of_two = min(average_over_time_paid, median_over_time_paid),
    proposed_total_salary_increase = number_employees * smaller_of_two
  ) |>
  mutate(
    current_pay_total = total_base_annual_pay + total_over_time_paid,
    proposed_pay_total = total_base_annual_pay + proposed_total_salary_increase,
    savings = current_pay_total - proposed_pay_total
  )


total_savings <- sum(tmp$savings)

total_savings_by_agency <- tmp |>
  group_by(agency_name) |>
  summarize(agency_savings = sum(savings))
```






We can see in the below table that the savings are significant each year.






```{r}
tmp |>
  group_by(fiscal_year) |>
  summarize(savings = sum(savings, na.rm = TRUE)) |>
  rename(
    "Total Annual Payroll Savings" = savings,
    "Fiscal Year" = fiscal_year)

  
  tmp$`Total Annual Payroll Savings` <- format(tmp$`Total Annual Payroll Savings`, big.mark = ",") 

  kable(tmp)
```

```{r}
#| output: true
# TODO check this
total_savings_by_agency |>
  slice_max(agency_savings, n = 10) |>
  kable(digits = 0, format.args = list(big.mark = ","))
```







In total, allocating a pay increase in this manner is estimated to save the City `r .QuartoInlineRender(dollar(total_savings))`.  We can see the ten agencies that save the most money using this method. 




[^1]: The Commission has determined it was best to analyze this using the highest level departmental data. This was created using the _published_ department from payroll data and labeling it with the highest level department information that could be reasonably assigned. Lower level agency data has been retained and is used as a key to help identify unique employees within an agency in the absence of unique employee identifiers. 


[^3]: https://www.ocb-nyc.org/about/



[^5]: https://codelibrary.amlegal.com/codes/newyorkcity/latest/NYCcharter/0-0-0-9







```{r}
#| output: true
time_vec <- c("Last Updated:", format(Sys.time(), "%Y-%m-%d at %H:%M%p"))
cat(paste(time_vec, " "))
```

